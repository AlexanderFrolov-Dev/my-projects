import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.regex.Pattern;

public class AppFrame extends JFrame {
    JPanel contentPanel = new JPanel();
    JLabel addFirstNumber = new JLabel("Лёха, введи первое число и нажми <Enter>:");
    JTextField firstNumberField = new JTextField();
    JLabel choosingFirstNumber = new JLabel(FIRST_NUMBER_NOT_ENTERED);
    JLabel addOperator = new JLabel("Лёха, выбери оператор:");
    JPanel operatorPanel = new JPanel(new FlowLayout());
    ButtonGroup buttonGroup = new ButtonGroup();
    JRadioButton plus = new JRadioButton("+");
    JRadioButton minus = new JRadioButton("-");
    JRadioButton multiply = new JRadioButton("*");
    JRadioButton divide = new JRadioButton("/");
    JLabel choosingOperator = new JLabel(OPERATOR_NOT_ENTERED);
    JLabel addSecondNumber = new JLabel("Лёха, введи второе число и нажми <Enter>:");
    JTextField secondNumberField = new JTextField();
    JLabel choosingSecondNumber = new JLabel(SECOND_NUMBER_NOT_ENTERED);
    JButton calculateResult = new JButton("Вычислить результат");
    JScrollPane scrollPane;
    JTextArea resultText = new JTextArea("");
    StringBuilder result = new StringBuilder();
    private static final String FIRST_NUMBER_NOT_ENTERED = "Первое число не выбрано";
    private static final String SECOND_NUMBER_NOT_ENTERED = "Второе число не выбрано";
    private static final String OPERATOR_NOT_ENTERED = "Вы не выбрали оператор";
    private static final String FIRST_NUMBER_IS_ENTERED = "Первое число: ";
    private static final String SECOND_NUMBER_IS_ENTERED = "Второе число: ";
    private static final String OPERATOR_IS_ENTERED = "Выбран оператор: ";
    private static final String NOT_NUMBER = "Введенное значение не является числом. \nВведите число.\n";
    String[] arrayResult = new String[4];
    String firstNumberInput = "";
    String operator = "";
    String secondNumberInput = "";
    String alert = "";
    String test = "test";
    int countAlert = 0;
    double firstNumber;
    double secondNumber;
    double resultCount;

    // TODO: 05.07.2022 написать проверку не возможности деления на ноль.

    public AppFrame() throws IOException {
        setTitle("Калькулятор для Лёхи");
        setSize(new Dimension(750,750));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setContentPane(contentPanel);
        setLayout(new BoxLayout(contentPanel,BoxLayout.PAGE_AXIS));
        setLocationRelativeTo(null);

        contentPanel.setBackground(Color.MAGENTA);

        buttonGroup.add(minus);
        buttonGroup.add(plus);
        buttonGroup.add(multiply);
        buttonGroup.add(divide);

        firstNumberField.setMaximumSize(new Dimension(150, 20));
        secondNumberField.setMaximumSize(new Dimension(150, 20));

        addFirstNumber.setAlignmentX(Component.CENTER_ALIGNMENT);
        firstNumberField.setAlignmentX(Component.CENTER_ALIGNMENT);
        choosingFirstNumber.setAlignmentX(Component.CENTER_ALIGNMENT);
        addOperator.setAlignmentX(Component.CENTER_ALIGNMENT);
        choosingOperator.setAlignmentX(Component.CENTER_ALIGNMENT);
        addSecondNumber.setAlignmentX(Component.CENTER_ALIGNMENT);
        secondNumberField.setAlignmentX(Component.CENTER_ALIGNMENT);
        choosingSecondNumber.setAlignmentX(Component.CENTER_ALIGNMENT);
        calculateResult.setAlignmentX(Component.CENTER_ALIGNMENT);

        resultText.setEditable(false);

        scrollPane = new JScrollPane(resultText);
        scrollPane.setMaximumSize(new Dimension(250, 400));

        operatorPanel.setMaximumSize(new Dimension(140, 25));
        operatorPanel.setBackground(Color.MAGENTA);
        operatorPanel.add(plus);
        operatorPanel.add(minus);
        operatorPanel.add(multiply);
        operatorPanel.add(divide);

        add(Box.createRigidArea(new Dimension(contentPanel.getWidth(), 50)));
        contentPanel.add(addFirstNumber);
        contentPanel.add(firstNumberField);
        contentPanel.add(choosingFirstNumber);
        add(Box.createRigidArea(new Dimension(contentPanel.getWidth(), 15)));
        contentPanel.add(addOperator);
        contentPanel.add(operatorPanel);
        contentPanel.add(choosingOperator);
        add(Box.createRigidArea(new Dimension(contentPanel.getWidth(), 15)));
        contentPanel.add(addSecondNumber);
        contentPanel.add(secondNumberField);
        contentPanel.add(choosingSecondNumber);
        add(Box.createRigidArea(new Dimension(contentPanel.getWidth(), 50)));
        contentPanel.add(calculateResult);
        add(Box.createRigidArea(new Dimension(contentPanel.getWidth(), 50)));
        contentPanel.add(scrollPane);

        firstNumberField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                firstNumberInput = firstNumberField.getText();
                if (isNumber(firstNumberInput)){
                    firstNumber = getNumber(firstNumberField.getText());
                    if (firstNumberInput != "") {
//                        result.append(firstNumber)
//                                .append(" ");
                        arrayResult[0] = String.valueOf(firstNumber);
                        choosingFirstNumber.setText(FIRST_NUMBER_IS_ENTERED + firstNumber);
                    }
                } else {
                    result.append(NOT_NUMBER);
                    resultText.setText(String.valueOf(result));
                }
            }
        });

        secondNumberField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                secondNumberInput = secondNumberField.getText();
                if (isNumber(secondNumberInput)){
                    secondNumber = getNumber(secondNumberField.getText());
                    if ((arrayResult[0] != "") && (arrayResult[1] != "") && (arrayResult[2] != "")) {
                        resultCount = switch (operator) {
                            case "+" -> firstNumber + secondNumber;
                            case "-" -> firstNumber - secondNumber;
                            case "*" -> firstNumber * secondNumber;
                            case "/" -> firstNumber / secondNumber;
                            default -> 0;
                        };
                        arrayResult[2] = String.valueOf(secondNumber);
                        arrayResult[3] = String.valueOf(resultCount);
//                        result.append(secondNumber)
//                                .append(" = ")
//                                .append(resultCount)
//                                .append("\n");
//                        result.append(firstNumber)
//                              .append(" ")
//                              .append(operator)
//                              .append(" ")
//                              .append(secondNumber)
//                              .append(" = ")
//                              .append(resultCount)
//                              .append("\n");
                        choosingSecondNumber.setText(SECOND_NUMBER_IS_ENTERED + secondNumber);
                    }
                } else {
                    result.append(NOT_NUMBER);
                    resultText.setText(String.valueOf(result));
                }
            }
        });

        calculateResult.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resultText.setText(composeString(String.valueOf(resultCount)));
                firstNumber = 0;
                secondNumber = 0;
                firstNumberField.setText("");
                secondNumberField.setText("");
                choosingFirstNumber.setText(FIRST_NUMBER_NOT_ENTERED);
                choosingSecondNumber.setText(SECOND_NUMBER_NOT_ENTERED);
            }
        });

        plus.addActionListener(new CalculatorActionListener());
        minus.addActionListener(new CalculatorActionListener());
        multiply.addActionListener(new CalculatorActionListener());
        divide.addActionListener(new CalculatorActionListener());

        setVisible(true);
    }

    public boolean isNumber(String str) {
        Pattern pattern = Pattern.compile("\\d+\\.?\\d*");
        return pattern.matcher(str).find();
    }

    public double getNumber(String inputString) {
        return Double.parseDouble(inputString);
    }

    public String composeString(String resultNumber) {
        result.append(arrayResult[0])
                .append(" ")
                .append(arrayResult[1])
                .append(" ")
                .append(arrayResult[2])
                .append(" ")
                .append("=")
                .append(" ")
                .append(resultNumber)
                .append("\n");
        return String.valueOf(result);
    }

    public class CalculatorActionListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            operator = ((JRadioButton)e.getSource()).getText();
            if ((firstNumberInput != "") && (operator != "")) {
//                result.append(operator)
//                        .append(" ");
                arrayResult[1] = String.valueOf(operator);
                choosingOperator.setText(OPERATOR_IS_ENTERED + operator);
            }
        }
    }
}