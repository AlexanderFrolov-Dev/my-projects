------------------------------------------------------------------------------------------------------------------------
version 1.0
------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------
import javax.swing.*;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(AppFrame::new);
    }
}
-------------------------------------------------
-------------------------------------------------
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class AppFrame extends JFrame {
    JPanel mainPane = new JPanel();
    JLabel addFirstTable = new JLabel("Введите путь к первому файлу");
    JLabel addSecondTable = new JLabel("Введите путь ко второму файлу");
    JTextField firstPath = new JTextField();
    JTextField secondPath = new JTextField();
    JButton compareTables = new JButton("Сравнить файлы");
    JLabel messages = new JLabel();
    ArrayList<String> firstCSVFileList;
    ArrayList<String> secondCSVFileList;

    public AppFrame() {
        setTitle("Сравнение CSV файлы");
        setSize(600,400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        addFirstTable.setAlignmentX(Component.CENTER_ALIGNMENT);  // Установить центральное расположение элементов.
        firstPath.setAlignmentX(Component.CENTER_ALIGNMENT);
        addSecondTable.setAlignmentX(Component.CENTER_ALIGNMENT);
        secondPath.setAlignmentX(Component.CENTER_ALIGNMENT);
        compareTables.setAlignmentX(Component.CENTER_ALIGNMENT);
        messages.setAlignmentX(Component.CENTER_ALIGNMENT);

        firstPath.setMaximumSize(new Dimension(500,20));  // Ограничить размеры отдельных элементов.
        secondPath.setMaximumSize(new Dimension(500,20));

        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 50)));  // Установить отступы.
        mainPane.add(addFirstTable);
        mainPane.add(firstPath);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 50)));
        mainPane.add(addSecondTable);
        mainPane.add(secondPath);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 25)));
        mainPane.add(compareTables);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 25)));
        mainPane.add(messages);

        firstPath.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                firstHSSFWorkbook = readWorkbook(firstPath.getText());

            }
        });

        secondPath.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                secondHSSFWorkbook = readWorkbook(secondPath.getText());
            }
        });

        compareTables.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                if (compareBooks(firstHSSFWorkbook, secondHSSFWorkbook)) {
//                    messages.setText("Таблицы идентичны"
//                            + " Хэш первой таблицы: "
//                            + firstHSSFWorkbook.hashCode()
//                            + " Хэш второй таблицы: "
//                            + secondHSSFWorkbook.hashCode());
//                } else {
//                    messages.setText("Таблицы не идентичны"
//                            + " Хэш первой таблицы: "
//                            + firstHSSFWorkbook.hashCode()
//                            + " Хэш второй таблицы: "
//                            + secondHSSFWorkbook.hashCode()
//                            + " "
//                            + firstHSSFWorkbook.toString());
//                    System.out.println(firstHSSFWorkbook.getNumberOfNames());
//                }
            }
        });

        mainPane.setLayout(new BoxLayout(mainPane,BoxLayout.PAGE_AXIS));  // Установить менеджер компоновки для
        // вертикального расположения элементов на
        // панели.

        add(mainPane);

        setLocationRelativeTo(null);  // Установить открытие окна по центру экрана.

        setVisible(true);
    }
}

------------------------------------------------------------------------------------------------------------------------
version 1.1 Нерабочий вариант.
------------------------------------------------------------------------------------------------------------------------
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Stream;

public class AppFrame extends JFrame {
    private JPanel mainPane = new JPanel();
    JLabel addFirstTable = new JLabel("Введите путь к первому файлу и нажмите <Enter>");
    JLabel addSecondTable = new JLabel("Введите путь ко второму файлу и нажмите <Enter>");
    JLabel showText = new JLabel();
    JLabel firstFileFound = new JLabel("Первый файл найден");
    JLabel secondFileFound = new JLabel("Второй файл найден");
    JTextField firstPath = new JTextField();
    JTextField secondPath = new JTextField();
    JButton compareTables = new JButton("Сравнить файлы");
    JTextArea messages = new JTextArea();
    JScrollPane scrollPane;
//    File firstFile = new File(firstPath.getText());
    File firstFile;
    File secondFile = new File(secondPath.getText());
    int numberOfRows = 0;
    int symbol;
    FileInputStream fin;
    StringBuilder lineBuilder = new StringBuilder();
    String fullText = "";
    ArrayList<String> firstCSVFileList;
    ArrayList<String> secondCSVFileList;
    private Map<Integer,String> rowAndColumn;
    private Map<Map<Integer,String>,String> cells;
    private String[] rowOfCells;
    private static final char A = 'A';
    private String cell = "";
    private String column = "";
    private String line = "";
    private StringBuilder sbColumnLetters = new StringBuilder();

    public AppFrame() {
        setTitle("Сравнение CSV файлы");
        setSize(600,400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        addFirstTable.setAlignmentX(Component.CENTER_ALIGNMENT);  // Установить центральное расположение элементов.
        firstPath.setAlignmentX(Component.CENTER_ALIGNMENT);
        showText.setAlignmentX(Component.CENTER_ALIGNMENT);
        addSecondTable.setAlignmentX(Component.CENTER_ALIGNMENT);
        secondPath.setAlignmentX(Component.CENTER_ALIGNMENT);
        compareTables.setAlignmentX(Component.CENTER_ALIGNMENT);
        messages.setAlignmentX(Component.CENTER_ALIGNMENT);

        firstPath.setMaximumSize(new Dimension(500,20));  // Ограничить размеры отдельных элементов.
        secondPath.setMaximumSize(new Dimension(500,20));

        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 50)));  // Установить отступы.
        mainPane.add(addFirstTable);
        mainPane.add(firstPath);
        mainPane.add(showText);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 50)));
        mainPane.add(addSecondTable);
        mainPane.add(secondPath);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 25)));
        mainPane.add(compareTables);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 25)));
        mainPane.add(messages);
        messages.setEditable(false);
        scrollPane = new JScrollPane(messages);
        scrollPane.setMaximumSize(new Dimension(500,100));
        mainPane.add(scrollPane);

        mainPane.setBackground(Color.ORANGE);

        firstPath.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                showText.setText(firstPath.getText());
//                firstFile = new File(firstPath.getText());
                firstFile = new File("C:\\Users\\Andrey Pakhomenkov\\Desktop\\Test_Files\\First_File_CSV.csv");
                try {
                    readFromFile(firstFile);
                    messages.setText(fullText);
                    showText.setText(String.valueOf(numberOfRows));
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        secondPath.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        compareTables.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        mainPane.setLayout(new BoxLayout(mainPane,BoxLayout.PAGE_AXIS));  // Установить менеджер компоновки для
                                                                          // вертикального расположения элементов на
                                                                          // панели.

        add(mainPane);

        setLocationRelativeTo(null);  // Установить открытие окна по центру экрана.

        setVisible(true);
    }

    private void readFromFile(File file) throws IOException {
//        char startLetter = A;
        char endLetter;
        fin = new FileInputStream(file);
        do {
            symbol = fin.read();
            if (symbol != -1) {
                lineBuilder.append((char) symbol);
//                splitIntoLines(lineBuilder);
                line = splitIntoLines(lineBuilder);
                rowOfCells = splitIntoCells(line);
//                endLetter = (char) (startLetter + rowOfCells.length);
                // TODO: 07.07.2022 попробовать сделать через рекурсию
                char[] chars = getColumnLetters(rowOfCells);
//                for (int i = 0; i < rowOfCells.length; i++) {
//                    for (char i = 'A'; i <= 'Z'; i++) {
//                        System.out.println(s + " " + i);
//                    }
//                    char startLetter = 'A';
//                    column = String.valueOf(startLetter);
//                    startLetter++;
//                    System.out.println(s + " " + startLetter);
//                    char[] chars = getColumnLetters(rowOfCells);
//                    System.out.println(chars[i] + " - " + rowOfCells[i]);
//                }
//                rowOfCells = (ArrayList<String>) Arrays.asList(splitIntoLines(lineBuilder));
//                for (String s : rowOfCells) {
//                    char letter = A;
//                    column = String.valueOf(letter);
//                    letter++;
//                    System.out.println(letter);
//                }
                fullText = String.valueOf(lineBuilder);
            }
        } while (symbol != -1);
    }

    private String splitIntoLines(StringBuilder sb) {
        String s = "";
        if ((((char) symbol) == '\n') || (((char) symbol) == '\t')) {
            numberOfRows++;
            s = String.valueOf(sb);
        }
        return  s;
    }

    private char[] getColumnLetters(String[] strings) {
        char[] columnLetters;
        char endLetter = (char) (A + strings.length);
        for (char i = A; i <= endLetter; i++) {
            sbColumnLetters.append(i);
            System.out.println(strings[i] + " " + i);
//            System.out.println(endLetter);
        }
        columnLetters = sbColumnLetters.toString().toCharArray();
        return columnLetters;
    }

    private String[] splitIntoCells(String row) {
        return row.split(";");
    }

    private void test(String s) {
        Stream.of(s)
                .map((s1) -> s.split(";"))
                .toArray();
    }

    private String lettersOfColumn() {

        return "";
    }
}

------------------------------------------------------------------------------------------------------------------------
version 1.2 Метод getCells() в строке уже верно выводит цифровой и буквенный индексы (по крайней мере, когда работаем с
одной буквой индекса), и содержимое ячейки.
------------------------------------------------------------------------------------------------------------------------
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Stream;

public class AppFrame extends JFrame {
    private JPanel mainPane = new JPanel();
    JLabel addFirstTable = new JLabel("Введите путь к первому файлу и нажмите <Enter>");
    JLabel addSecondTable = new JLabel("Введите путь ко второму файлу и нажмите <Enter>");
    JLabel showText = new JLabel();
    JLabel firstFileFound = new JLabel("Первый файл найден");
    JLabel secondFileFound = new JLabel("Второй файл найден");
    JTextField firstPath = new JTextField();
    JTextField secondPath = new JTextField();
    JButton compareTables = new JButton("Сравнить файлы");
    JTextArea messages = new JTextArea();
    JScrollPane scrollPane;
//    File firstFile = new File(firstPath.getText());
    File firstFile;
    File secondFile = new File(secondPath.getText());
    int numberOfRows = 0;
    int symbol;
    FileInputStream fin;
    StringBuilder lineBuilder = new StringBuilder();
    String fullText = "";
    ArrayList<String> firstCSVFileList;
    ArrayList<String> secondCSVFileList;
    private Map<Integer,String> rowAndColumn;
    private Map<Map<Integer,String>,String> cells;
    private String[] rowOfCells;
    private static final char A = 'A';
    private String cell = "";
    private String column = "";
    private String line = "";
    private StringBuilder sbColumnLetters = new StringBuilder();

    public AppFrame() {
        setTitle("Сравнение CSV файлы");
        setSize(600,400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        addFirstTable.setAlignmentX(Component.CENTER_ALIGNMENT);  // Установить центральное расположение элементов.
        firstPath.setAlignmentX(Component.CENTER_ALIGNMENT);
        showText.setAlignmentX(Component.CENTER_ALIGNMENT);
        addSecondTable.setAlignmentX(Component.CENTER_ALIGNMENT);
        secondPath.setAlignmentX(Component.CENTER_ALIGNMENT);
        compareTables.setAlignmentX(Component.CENTER_ALIGNMENT);
        messages.setAlignmentX(Component.CENTER_ALIGNMENT);

        firstPath.setMaximumSize(new Dimension(500,20));  // Ограничить размеры отдельных элементов.
        secondPath.setMaximumSize(new Dimension(500,20));

        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 50)));  // Установить отступы.
        mainPane.add(addFirstTable);
        mainPane.add(firstPath);
        mainPane.add(showText);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 50)));
        mainPane.add(addSecondTable);
        mainPane.add(secondPath);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 25)));
        mainPane.add(compareTables);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 25)));
        mainPane.add(messages);
        messages.setEditable(false);
        scrollPane = new JScrollPane(messages);
        scrollPane.setMaximumSize(new Dimension(500,100));
        mainPane.add(scrollPane);

        mainPane.setBackground(Color.ORANGE);

        firstPath.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                showText.setText(firstPath.getText());
//                firstFile = new File(firstPath.getText());
                firstFile = new File("C:\\Users\\Andrey Pakhomenkov\\Desktop\\Test_Files\\First_File_CSV.csv");
                try {
                    readFromFile(firstFile);
                    messages.setText(fullText);
                    showText.setText(String.valueOf(numberOfRows));
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        secondPath.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        compareTables.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        mainPane.setLayout(new BoxLayout(mainPane,BoxLayout.PAGE_AXIS));  // Установить менеджер компоновки для
                                                                          // вертикального расположения элементов на
                                                                          // панели.

        add(mainPane);

        setLocationRelativeTo(null);  // Установить открытие окна по центру экрана.

        setVisible(true);
    }

    private void readFromFile(File file) throws IOException {
        fin = new FileInputStream(file);
        do {
            symbol = fin.read();
            if (symbol != -1) {
                lineBuilder.append((char) symbol);
//                splitIntoLines(lineBuilder);
                line = splitIntoLines(lineBuilder);
                rowOfCells = splitIntoCells(line);
                fullText = String.valueOf(lineBuilder);
            }
        } while (symbol != -1);
    }

    private String splitIntoLines(StringBuilder sb) {
        String s = "";
        if ((((char) symbol) == '\n') || (((char) symbol) == '\t')) {
            numberOfRows++;
            s = String.valueOf(sb);
        }
        return  s;
    }

    private String[] splitIntoCells(String row) {
        return row.split(";");
    }

    private static String[] setIndexesOfCells(int cellsCount) {
        String[] lettersIndexOfCells = new String[cellsCount];
        String appender = "";
        int count = 0;
        char letter;
        char additionalLetter;
        int indexLetter = 0;
        int additionalLetterCount = 0;

        for (int i = 0; i < cellsCount; i++) {
            letter = (char) (indexLetter + 65);
            lettersIndexOfCells[count] = appender + letter;
            indexLetter++;
            count++;
            if ((i != 0) && (i % 25 == 0)) {
                additionalLetter = (char) (additionalLetterCount + 65);
                additionalLetterCount++;
                appender = String.valueOf(additionalLetter);
                indexLetter = 0;
            }
        }
        return lettersIndexOfCells;
    }
}

------------------------------------------------------------------------------------------------------------------------
version 1.3 Убрал много лишнего закомменченого кода.
------------------------------------------------------------------------------------------------------------------------
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

public class Test {
    private static int countOfColumns = 0;
    private static int countOfLines = 0;
    private static StringBuilder sb = new StringBuilder();
    private static String line;
    private static String separateLine = "";
    private static String[] cell;
    private static String[] cells;
    private static String[] indexLetters;
    private static String[] lines;
    private static List<String> listCells = new LinkedList<>();
    private static FileInputStream fin;

    public static void main(String[] args) throws FileNotFoundException {
        readDataFromFile();
        getCells();

        for (String s : listCells) {
            System.out.println(s);
        }
//        for (int i = 0; i < getCountOfLines(); i++) {
//            for (int j = 0; j < getCountOfColumns(); j++) {
//                for (int k = 0; k < cell.length; k++) {
//                    s = getCells()[i][j][k];
//                    System.out.println("count: " + count + " - " + s);
//                    count++;
//                }
//            }
//        }
    }

    private static void readDataFromFile() throws FileNotFoundException {
        int symbol;
        fin = new FileInputStream("C:\\Users\\Andrey Pakhomenkov\\Desktop\\Test_Files\\First_File_CSV.csv");

        try {
            do {
                symbol = fin.read();
                if (symbol != -1) {
                    sb.append((char) symbol);
//                    System.out.println((char) symbol);
                }
            } while (symbol != -1);
        } catch (IOException e) {
            System.out.println("Ошибка чтения из файла.");
        }

        for (String s : splitIntoLines(String.valueOf(sb))) {
            line = s;
//            System.out.println(s);
        }
//        System.out.println(getCountOfColumns());
//        System.out.println(getCountOfLines());
//        System.out.println(line);
//        for (String s : splitToCells(line)) {
//            System.out.println(s);
//        }
    }

    private static String[] splitIntoLines(String s) {
        return s.split("\n");
    }

    private static String[] splitToCells(String s) {
        return s.split(";");
    }

    public static int getCountOfColumns() {
        return splitToCells(line).length;
    }

    public static int getCountOfLines() {
        return splitIntoLines(String.valueOf(sb)).length;
    }

    private static String[] setIndexesOfCells(int cellsCount) {
        String[] lettersIndexOfCells = new String[cellsCount];
        String appender = "";
        int count = 0;
        char letter;
        char additionalLetter;
        int indexLetter = 0;
        int additionalLetterCount = 0;

        for (int i = 0; i < cellsCount; i++) {
            letter = (char) (indexLetter + 65);
            lettersIndexOfCells[count] = appender + letter;
            indexLetter++;
            count++;
            if ((i != 0) && (i % 25 == 0)) {
                additionalLetter = (char) (additionalLetterCount + 65);
                additionalLetterCount++;
                appender = String.valueOf(additionalLetter);
                indexLetter = 0;
            }
        }
        return lettersIndexOfCells;
    }

    private static List<String> getCells() {
        String s;
        lines = splitIntoLines(String.valueOf(sb));
        for (int i = 0; i < getCountOfLines(); i++) {
            cells = splitToCells(lines[i]);
            for (int j = 0; j < getCountOfColumns(); j++) {
                indexLetters = setIndexesOfCells(getCountOfColumns());
                cell = new String[]{String.valueOf(i), String.valueOf(indexLetters[j]), String.valueOf(cells[j])};
                s = i + "|" + indexLetters[j] + "|" + cells[j];
                listCells.add(s);
            }
        }
        return listCells;
    }
}

------------------------------------------------------------------------------------------------------------------------
version 1.4 Добавил панель для будущих таблиц.
------------------------------------------------------------------------------------------------------------------------
import javax.swing.*;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(AppFrame::new);
    }
}
----------
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Stream;

public class AppFrame extends JFrame {
    private JPanel mainPane = new JPanel();
    private JPanel panelForTables = new JPanel();
    private JScrollPane scrollForFirstTable;
    private JScrollPane scrollForSecondTable;
    private JTable firstTable;
    private JTable secondTable;
    JLabel addFirstTable = new JLabel("Введите путь к первому файлу и нажмите <Enter>");
    JLabel addSecondTable = new JLabel("Введите путь ко второму файлу и нажмите <Enter>");
    JLabel showText = new JLabel();
    JLabel firstFileFound = new JLabel("Первый файл найден");
    JLabel secondFileFound = new JLabel("Второй файл найден");
    JTextField firstPath = new JTextField();
    JTextField secondPath = new JTextField();
    JButton compareTables = new JButton("Сравнить файлы");
    JTextArea messages = new JTextArea();
    JScrollPane scrollPane;
//    File firstFile = new File(firstPath.getText());
    File firstFile;
    File secondFile = new File(secondPath.getText());
    int numberOfRows = 0;
    int symbol;
    FileInputStream fin;
    StringBuilder lineBuilder = new StringBuilder();
    String fullText = "";
    private String[] rowOfCells;
    private static final char A = 'A';
    private String cell = "";
    private String column = "";
    private String line = "";
    private StringBuilder sbColumnLetters = new StringBuilder();

    public AppFrame() {
        setTitle("Сравнение CSV файлы");
        setSize(1000,1000);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        addFirstTable.setAlignmentX(Component.CENTER_ALIGNMENT);  // Установить центральное расположение элементов.
        firstPath.setAlignmentX(Component.CENTER_ALIGNMENT);
        showText.setAlignmentX(Component.CENTER_ALIGNMENT);
        addSecondTable.setAlignmentX(Component.CENTER_ALIGNMENT);
        secondPath.setAlignmentX(Component.CENTER_ALIGNMENT);
        compareTables.setAlignmentX(Component.CENTER_ALIGNMENT);
        messages.setAlignmentX(Component.CENTER_ALIGNMENT);

        firstPath.setMaximumSize(new Dimension(500,20));  // Ограничить размеры отдельных элементов.
        secondPath.setMaximumSize(new Dimension(500,20));

        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 50)));  // Установить отступы.
        mainPane.add(addFirstTable);
        mainPane.add(firstPath);
        mainPane.add(showText);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 50)));
        mainPane.add(addSecondTable);
        mainPane.add(secondPath);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 25)));
        mainPane.add(compareTables);
        mainPane.add(Box.createRigidArea(new Dimension(mainPane.getWidth(), 25)));
        mainPane.add(messages);
        messages.setEditable(false);
        scrollPane = new JScrollPane(messages);
        scrollPane.setMaximumSize(new Dimension(500,100));
        mainPane.add(scrollPane);

        mainPane.setBackground(Color.ORANGE);

        firstPath.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                showText.setText(firstPath.getText());
//                firstFile = new File(firstPath.getText());
                firstFile = new File("C:\\Users\\Andrey Pakhomenkov\\Desktop\\Test_Files\\First_File_CSV.csv");
                try {
                    readFromFile(firstFile);
                    messages.setText(fullText);
                    showText.setText(String.valueOf(numberOfRows));
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        secondPath.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        compareTables.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });

        mainPane.setLayout(new BoxLayout(mainPane,BoxLayout.PAGE_AXIS));  // Установить менеджер компоновки для
                                                                          // вертикального расположения элементов на
                                                                          // панели.

        add(mainPane);

        setLocationRelativeTo(null);  // Установить открытие окна по центру экрана.

        setVisible(true);
    }

    private void readFromFile(File file) throws IOException {
        fin = new FileInputStream(file);
        do {
            symbol = fin.read();
            if (symbol != -1) {
                lineBuilder.append((char) symbol);
//                splitIntoLines(lineBuilder);
                line = splitIntoLines(lineBuilder);
                rowOfCells = splitIntoCells(line);
                fullText = String.valueOf(lineBuilder);
            }
        } while (symbol != -1);
    }

    private String splitIntoLines(StringBuilder sb) {
        String s = "";
        if ((((char) symbol) == '\n') || (((char) symbol) == '\t')) {
            numberOfRows++;
            s = String.valueOf(sb);
        }
        return  s;
    }

    private String[] splitIntoCells(String row) {
        return row.split(";");
    }

    private static String[] setIndexesOfCells(int cellsCount) {
        String[] lettersIndexOfCells = new String[cellsCount];
        String appender = "";
        int count = 0;
        char letter;
        char additionalLetter;
        int indexLetter = 0;
        int additionalLetterCount = 0;

        for (int i = 0; i < cellsCount; i++) {
            letter = (char) (indexLetter + 65);
            lettersIndexOfCells[count] = appender + letter;
            indexLetter++;
            count++;
            if ((i != 0) && (i % 25 == 0)) {
                additionalLetter = (char) (additionalLetterCount + 65);
                additionalLetterCount++;
                appender = String.valueOf(additionalLetter);
                indexLetter = 0;
            }
        }
        return lettersIndexOfCells;
    }
}
----------
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

public class Test {
    private static int countOfColumns = 0;
    private static int countOfLines = 0;
    private static StringBuilder sb = new StringBuilder();
    private static String line;
    private static String separateLine = "";
    private static String[] cell;
    private static String[] cells;
    private static String[] indexLetters;
    private static String[] lines;
    private static List<String> listCells = new LinkedList<>();
    private static FileInputStream fin;

    public static void main(String[] args) throws FileNotFoundException {
        readDataFromFile();
        getCells();

        for (String s : listCells) {
            System.out.println(s);
        }
//        for (int i = 0; i < getCountOfLines(); i++) {
//            for (int j = 0; j < getCountOfColumns(); j++) {
//                for (int k = 0; k < cell.length; k++) {
//                    s = getCells()[i][j][k];
//                    System.out.println("count: " + count + " - " + s);
//                    count++;
//                }
//            }
//        }
    }

    private static void readDataFromFile() throws FileNotFoundException {
        int symbol;
        fin = new FileInputStream("C:\\Users\\Andrey Pakhomenkov\\Desktop\\Test_Files\\First_File_CSV.csv");

        try {
            do {
                symbol = fin.read();
                if (symbol != -1) {
                    sb.append((char) symbol);
//                    System.out.println((char) symbol);
                }
            } while (symbol != -1);
        } catch (IOException e) {
            System.out.println("Ошибка чтения из файла.");
        }

        for (String s : splitIntoLines(String.valueOf(sb))) {
            line = s;
//            System.out.println(s);
        }
//        System.out.println(getCountOfColumns());
//        System.out.println(getCountOfLines());
//        System.out.println(line);
//        for (String s : splitToCells(line)) {
//            System.out.println(s);
//        }
    }

    private static String[] splitIntoLines(String s) {
        return s.split("\n");
    }

    private static String[] splitToCells(String s) {
        return s.split(";");
    }

    public static int getCountOfColumns() {
        return splitToCells(line).length;
    }

    public static int getCountOfLines() {
        return splitIntoLines(String.valueOf(sb)).length;
    }

    private static String[] setIndexesOfCells(int cellsCount) {
        String[] lettersIndexOfCells = new String[cellsCount];
        String appender = "";
        int count = 0;
        char letter;
        char additionalLetter;
        int indexLetter = 0;
        int additionalLetterCount = 0;

        for (int i = 0; i < cellsCount; i++) {
            letter = (char) (indexLetter + 65);
            lettersIndexOfCells[count] = appender + letter;
            indexLetter++;
            count++;
            if ((i != 0) && (i % 25 == 0)) {
                additionalLetter = (char) (additionalLetterCount + 65);
                additionalLetterCount++;
                appender = String.valueOf(additionalLetter);
                indexLetter = 0;
            }
        }
        return lettersIndexOfCells;
    }

    private static List<String> getCells() {
        String s;
        lines = splitIntoLines(String.valueOf(sb));
        for (int i = 0; i < getCountOfLines(); i++) {
            cells = splitToCells(lines[i]);
            for (int j = 0; j < getCountOfColumns(); j++) {
                indexLetters = setIndexesOfCells(getCountOfColumns());
                cell = new String[]{String.valueOf(i), String.valueOf(indexLetters[j]), String.valueOf(cells[j])};
                s = i + "|" + indexLetters[j] + "|" + cells[j];
                listCells.add(s);
            }
        }
        return listCells;
    }
}
----------
import java.util.ArrayList;
import java.util.stream.Stream;

public class Test2 {
    static ArrayList<String> array = new ArrayList<>();

    public static void main(String[] args) {
//        for (String s : setIndexesOfCells(200)) {
//            System.out.println(s);
//        }
        for (String s : setIndexes(200)) {
            System.out.println(s);
        }
    }

    private static String[] setIndexesOfCells(int cellsCount) {
        String[] lettersIndexOfCells = new String[cellsCount];
        String appender = "";
        int count = 0;
        char letter;
        char additionalLetter;
        int indexLetter = 0;
        int additionalLetterCount = 0;

        for (int i = 0; i < cellsCount; i++) {
            letter = (char) (indexLetter + 65);
            lettersIndexOfCells[count] = appender + letter;
//            System.out.println(lettersIndexOfCells[count]);
            indexLetter++;
            count++;
            if ((i != 0) && (i % 25 == 0)) {
//                System.out.println("i % 26 == 0");
                additionalLetter = (char) (additionalLetterCount + 65);
                additionalLetterCount++;
                appender = String.valueOf(additionalLetter);
                indexLetter = 0;
            }
        }
        return lettersIndexOfCells;
    }
    private static ArrayList<String> setIndexes(int cellsCount) {
        char letter;
        char additionalLetter;
        int count = array.size();

        if (array.size() < cellsCount) {
            if (count < 26) {
                letter = (char) (count + 65);
                array.add(String.valueOf(letter));
            } else {
                letter = (char) ((count % 26) + 65);
                additionalLetter = (char) (((count / 26) - 1) + 65);
                array.add(String.valueOf(additionalLetter) + letter);
            }
            setIndexes(cellsCount);
        }
        return array;
    }

    private void test(String s) {
        Stream.of(s)
                .map((s1) -> s.split(";"))
                .toArray();
    }
}
